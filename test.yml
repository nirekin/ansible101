---
- name: This a training example
  hosts: localhost
  gather_facts: false
  vars:
    # local variable definition
    listening_on: 8080
    
    #reading environment variable
    val_http: "{{ lookup('env','env_http') }}"
    val_https: "{{ lookup('env','env_https') }}"
    
    # use "or" to default a variable lookup
    val_missing_envvar: "{{ lookup('env','dummy') or ('has_been_defaulted')  }}"
    
    # this environment variable is defined but has no content
    val_empty: "{{ lookup('env','env_empty')}}"
    # it can be defaulted if empty
    val_empty_defaulted: "{{ lookup('env','env_empty_defaulted') or ('has_been_defaulted')}}"
    
  tasks:
  
  # Simple debug content
  - name: Check required http envionment variable 
    debug:
      msg: "Env var http={{ val_http }}"  
  
  # Check command line varaibles with assertion
  - name: 'Check mandatory variables are defined'
    assert:
      that:
        - version is defined
        - version == "version_val"
  
        - other_variable is defined
        - other_variable == "other_variable_val"
  
  # Check required varaible with assertion
  - name: 'Check mandatory variables are defined'
    assert:
      that:
        - val_http is defined
        - val_http == "on"  or val_http == "off" 
        
        - val_https is defined
        - val_https == "on"  or val_https == "off" 
        
        - val_missing_envvar is defined
        - val_missing_envvar == "has_been_defaulted"
        
        - val_empty is defined
        - val_empty == ""
        
        - val_empty_defaulted is defined
        - val_empty_defaulted == "has_been_defaulted"
  
  
  #When condition    
  #When the variable is defined
  - name: Run only if val_http is defined
    debug:
      msg: "Runs only if val_http is defined"  
    when: val_http is defined       
  
  #When the variable is equals to a given value
  - name: Run only if val_http == on
    debug:
      msg: "Runs only if val_http == on"  
    when: val_http == "on" 
  
  #When the variable is equals to a value or another one
  - name: Run while val_http == on or val_http == off 
    debug:
      msg: "Run while val_http == on or val_http == off "  
    when: val_http == "on"  or val_http == "off" 


  #File creation
  - name: Create a file called '/tmp/testfile.txt' with the content 'hello world'.
    copy: 
      content: "Simple file content\n on the port {{ listening_on }} \nand that's it for \n{{ val_http }} \nand \n{{ val_https }}\nand \n{{ val_missing_envvar }}" 
      dest: /tmp/test_volume/testfile.txt
  
  #Loading variable from a file
  - name: Include vars of test_param.yml into the 'fromFile' variable
    include_vars:
      file: test_param.yml
      name: fromFile
  
  # Getting the dictionary length with a Jinja2 filter 
  - name: Check required http envionment variable 
    debug:
      msg: "Number of keys={{ fromFile.keys_content|length }}"    
  
  
  #Looping over a dictionary
  - name: Seing number of keys_content loaded from file
    debug: 
      msg: "{{ item }}"
    with_items:
      - "{{ fromFile.keys_content }}"
  
  - name: 'Setting tact'
    set_fact:
      val2: "{{ fromFile.keys_content[2] }}"
      val_empty: "{{ fromFile.keys_content[5] | default('empty_val')}}"
  
  # Checking from File
  - name: 'Checking if fromFile is well loaded'
    assert:
      that:
        - fromFile.from_file_1 is defined
        - fromFile.from_file_1 == "from_file_1_val"

        - fromFile.from_file_2 is defined
        - fromFile.from_file_2 == "from_file_2_val"

        - fromFile.from_file_3.sub1 is defined
        - fromFile.from_file_3.sub1 == "sub1_val"

        - fromFile.from_file_3.sub2 is defined
        - fromFile.from_file_3.sub2 == "sub2_val"

        - fromFile.from_file_3.sub3 is defined
        - fromFile.from_file_3.sub3 == "sub3_val"

        - fromFile.from_file_3.sub4 is defined
        - fromFile.from_file_3.sub4 == "sub4_val"

        - fromFile.keys_content is defined
        
        #template expression must be quoted"
        - "{{ fromFile.keys_content|length }} == 5"
        
        - fromFile.keys_content[0] == "key1"
        - fromFile.keys_content[1] == "key2"
        - fromFile.keys_content[2] == "key3"
        - fromFile.keys_content[3] == "key4"
        - fromFile.keys_content[4] == "key5"
        
        - val2 == "key3"
        - val_empty == "empty_val"

        
  # Checking1 from global variable passed with a file "all"
  # located in /etc/ansible/group_vars
  - name: 'Checking1 if fromFile is well loaded'
    assert:
      that:
        - global_from_file_1 == "from_file_1_val"
        - global_from_file_2 == "from_file_2_val"

        
  - name: Check parameters with block
    block:
    - set_fact:
        required_vars:
        - global_from_file_1
        - global_from_file_2
    - name: Check required parameters
      fail: msg="Parameter '{{item}}' is not defined"
      when: item not in vars
      with_items: "{{required_vars}}"

 